{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { HOSTELS_FETCH, HOSTELS_LOADING, HOSTEL_LOAD, HOSTEL_ERROR } from './types';\nimport axios from 'axios';\nvar URL = \"https://karuapi.herokuapp.com/api\";\n\nvar setLoading = function setLoading() {\n  return {\n    type: HOSTELS_LOADING\n  };\n};\n\nvar setHostels = function setHostels(data) {\n  return {\n    type: HOSTELS_FETCH,\n    payload: data\n  };\n};\n\nvar setHostel = function setHostel(data) {\n  return {\n    type: HOSTEL_LOAD,\n    payload: data\n  };\n};\n\nvar setError = function setError(data) {\n  return {\n    type: HOSTEL_ERROR,\n    payload: data\n  };\n};\n\nexport var fetchHostels = function fetchHostels() {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(setLoading());\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"\".concat(URL, \"/hostels/fetchHostels\")).then(function (response) {\n              return dispatch(setHostels(response.data.message));\n            })[\"catch\"](console.log));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchHostel = function fetchHostel(slug) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(setLoading());\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"\".concat(URL, \"/hostels/\").concat(slug)).then(function (response) {\n              var success = response.data.success;\n              if (!success) return dispatch(setError(response.data.message));\n              return dispatch(setHostel(response.data.message));\n            }));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/home/ransom/Documents/frontend/nextjs/redux_app/store/hostels/actions.js"],"names":["HOSTELS_FETCH","HOSTELS_LOADING","HOSTEL_LOAD","HOSTEL_ERROR","axios","URL","setLoading","type","setHostels","data","payload","setHostel","setError","fetchHostels","dispatch","get","then","response","message","console","log","fetchHostel","slug","success"],"mappings":";AAAA,SAAQA,aAAR,EAAsBC,eAAtB,EAAsCC,WAAtC,EAAkDC,YAAlD,QAAqE,SAArE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,GAAG,sCAAT;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,SAAO;AACHC,IAAAA,IAAI,EAACN;AADF,GAAP;AAGH,CAJD;;AAKA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI,EAAI;AACvB,SAAO;AACHF,IAAAA,IAAI,EAACP,aADF;AAEHU,IAAAA,OAAO,EAACD;AAFL,GAAP;AAIH,CALD;;AAMA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAAAF,IAAI,EAAI;AACtB,SAAO;AACHF,IAAAA,IAAI,EAACL,WADF;AAEHQ,IAAAA,OAAO,EAACD;AAFL,GAAP;AAIH,CALD;;AAMA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAH,IAAI,EAAI;AACrB,SAAO;AACHF,IAAAA,IAAI,EAACJ,YADF;AAEHO,IAAAA,OAAO,EAACD;AAFL,GAAP;AAIH,CALD;;AAMA,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACHA,YAAAA,QAAQ,CAACR,UAAU,EAAX,CAAR;AADG;AAAA,6CAEGF,KAAK,CAACW,GAAN,WAAaV,GAAb,4BAAyCW,IAAzC,CAA8C,UAACC,QAAD,EAAc;AAC9D,qBAAOH,QAAQ,CAACN,UAAU,CAACS,QAAQ,CAACR,IAAT,CAAcS,OAAf,CAAX,CAAf;AACH,aAFK,WAEGC,OAAO,CAACC,GAFX,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAMH,CAPM;AAQP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI,EAAI;AAC/B,SAAO,kBAAMR,QAAN;AAAA;AAAA;AAAA;AAAA;AACHA,YAAAA,QAAQ,CAACR,UAAU,EAAX,CAAR;AADG;AAAA,6CAEGF,KAAK,CAACW,GAAN,WAAaV,GAAb,sBAA4BiB,IAA5B,GAAoCN,IAApC,CAAyC,UAAAC,QAAQ,EAAI;AACvD,kBAAIM,OAAO,GAAGN,QAAQ,CAACR,IAAT,CAAcc,OAA5B;AACA,kBAAG,CAACA,OAAJ,EAAa,OAAOT,QAAQ,CAACF,QAAQ,CAACK,QAAQ,CAACR,IAAT,CAAcS,OAAf,CAAT,CAAf;AACb,qBAAOJ,QAAQ,CAACH,SAAS,CAACM,QAAQ,CAACR,IAAT,CAAcS,OAAf,CAAV,CAAf;AACH,aAJK,CAFH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAQH,CATM","sourcesContent":["import {HOSTELS_FETCH,HOSTELS_LOADING,HOSTEL_LOAD,HOSTEL_ERROR} from './types';\nimport axios from 'axios'\nconst URL = `https://karuapi.herokuapp.com/api`;\n\n\nconst setLoading = () => {\n    return {\n        type:HOSTELS_LOADING\n    }\n};\nconst setHostels = data => {\n    return {\n        type:HOSTELS_FETCH,\n        payload:data\n    }\n};\nconst setHostel = data => {\n    return {\n        type:HOSTEL_LOAD,\n        payload:data\n    }\n};\nconst setError = data => {\n    return {\n        type:HOSTEL_ERROR,\n        payload:data\n    }\n}\nexport const fetchHostels = () => {\n    return async dispatch => {\n        dispatch(setLoading());\n        await axios.get(`${URL}/hostels/fetchHostels`).then((response) => {\n            return dispatch(setHostels(response.data.message))\n        }).catch(console.log);\n    }\n};\nexport const fetchHostel = slug => {\n    return async dispatch => {\n        dispatch(setLoading());\n        await axios.get(`${URL}/hostels/${slug}`).then(response => {\n            let success = response.data.success;\n            if(!success) return dispatch(setError(response.data.message));\n            return dispatch(setHostel(response.data.message));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}