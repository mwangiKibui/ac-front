{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PRODUCTS_FETCH, PRODUCTS_LOADING } from './types';\nconst initialState = {\n  loading: false,\n  products: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case PRODUCTS_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case PRODUCTS_FETCH:\n      return _objectSpread({}, state, {\n        products: action.payload,\n        loading: false\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n});","map":{"version":3,"sources":["/home/ransom/Documents/frontend/nextjs/redux_app/store/mp/reducer.js"],"names":["PRODUCTS_FETCH","PRODUCTS_LOADING","initialState","loading","products","state","action","type","payload"],"mappings":";;;;;;AAAA,SAAQA,cAAR,EAAuBC,gBAAvB,QAA8C,SAA9C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAC,KADS;AAEjBC,EAAAA,QAAQ,EAAC;AAFQ,CAArB;AAKA,gBAAe,CAACC,KAAK,GAACH,YAAP,EAAoBI,MAApB,KAA+B;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,gBAAL;AACI,+BACOI,KADP;AAEIF,QAAAA,OAAO,EAAC;AAFZ;;AAIJ,SAAKH,cAAL;AACI,+BACOK,KADP;AAEID,QAAAA,QAAQ,EAACE,MAAM,CAACE,OAFpB;AAGIL,QAAAA,OAAO,EAAC;AAHZ;;AAKJ;AACI,+BAAWE,KAAX;AAbR;AAeH,CAhBD","sourcesContent":["import {PRODUCTS_FETCH,PRODUCTS_LOADING} from './types';\n\nconst initialState = {\n    loading:false,\n    products:[]\n};\n\nexport default (state=initialState,action) => {\n    switch(action.type){\n        case PRODUCTS_LOADING:\n            return {\n                ...state,\n                loading:true\n            };\n        case PRODUCTS_FETCH:\n            return {\n                ...state,\n                products:action.payload,\n                loading:false\n            }\n        default:\n            return {...state}\n    }\n}"]},"metadata":{},"sourceType":"module"}